<div class="calculator">
    <div class="calculator-output">
        <div class="output-syntax"></div>
        <div class="output-number"></div>
    </div>
    <div class="calculator-func">
        <div class="calculator-operators-top">
            <button type="button">%</button>
            <button type="button">CE</button>
            <button type="button">C</button>
            <button type="button">⌫</button>
            <button type="button">1/x</button>
            <button type="button">x²</button>
            <button type="button">√x</button>
            <button type="button">÷</button>
        </div>
        <div class="calculator-number">
            <button type="button">7</button>
            <button type="button">8</button>
            <button type="button">9</button>
            <button type="button">4</button>
            <button type="button">5</button>
            <button type="button">6</button>
            <button type="button">1</button>
            <button type="button">2</button>
            <button type="button">3</button>
            <button type="button">+/-</button>
            <button type="button">0</button>
            <button type="button">.</button>
        </div>
        <div class="calculator-operators-side">
            <button type="button">x</button>
            <button type="button">-</button>
            <button type="button">+</button>
            <button type="button">=</button>
        </div>
    </div>
</div>

<script>
    // Declare constants
    const out_num = document.querySelector('.output-number');
    const out_sym = document.querySelector('.output-syntax');
    let continuousNum = false;

    // Event listener for button clicks
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelector('.calculator').addEventListener('click', function (event) {
            if (event.target.tagName === 'BUTTON') {
                pushToOutput(event.target.innerText);
            }
        });
    });

    // Helper function to evaluate expressions
    function evaluateExpression(expression) {
        try {
            expression = expression.replace(/x/g, '*').replace(/÷/g, '/');
            return eval(expression);
        } catch (error) {
            return 'Error';
        }
    }

    // Main function to handle button clicks
    function pushToOutput(number) {
        number = number.trim();

        switch (number) {
            case '=':
                handleEqual();
                break;

            case 'C':
                clearAll();
                break;

            case 'CE':
                clearEntry();
                break;

            case '⌫':
                backspace();
                break;

            case 'x²':
                square();
                break;

            case '1/x':
                inverse();
                break;

            case '√x':
                squareRoot();
                break;

            case '+/-':
                toggleSign(number);
                break;

            case '.':
                appendDecimal();
                break;

            default:
                handleDefault(number);
                break;
        }
    }

    // Handle equals ('=')
    function handleEqual() {
        let expression = out_sym.innerText.trim();
        if (out_num.innerText.trim() !== "") {
            expression += ` ${out_num.innerText.trim()}`;
        }
        out_num.innerText = evaluateExpression(expression);
        out_sym.innerText = "";
        continuousNum = false;
    }

    // Clear all
    function clearAll() {
        out_num.innerText = "";
        out_sym.innerText = "";
        continuousNum = false;
    }

    // Clear entry
    function clearEntry() {
        out_num.innerText = "";
        continuousNum = false;
    }

    // Backspace
    function backspace() {
        out_num.innerText = out_num.innerText.slice(0, -1);
        continuousNum = true;
    }

    // Square
    function square() {
        out_num.innerText = Math.pow(parseFloat(out_num.innerText), 2);
    }

    // Inverse (1/x)
    function inverse() {
        out_num.innerText = 1 / parseFloat(out_num.innerText);
    }

    // Square root
    function squareRoot() {
        out_num.innerText = Math.sqrt(parseFloat(out_num.innerText));
    }

    // Toggle sign (+/-)
    function toggleSign(number) {
        var input = out_num.innerText.trim();
        if (input[0] !== "-") {
            out_num.innerText = `-${out_num.innerText}`;
        }
        else {
            out_num.innerText = input.slice(1, input.length);
        }
    }

    // Append decimal
    function appendDecimal() {
        if (!out_num.innerText.includes('.')) {
            out_num.innerText += ".";
        }
    }

    // Handle operators and numbers
    function handleDefault(number) {
        if (!isNaN(number) && number !== "") {
            if (!continuousNum) {
                out_num.innerText = number;
            } else {
                out_num.innerText += number;
            }
            continuousNum = true;
        } else if (out_num.innerText !== "") {
            let expression = out_sym.innerText.trim();
            if (out_num.innerText.trim() !== "") {
                expression += ` ${out_num.innerText.trim()}`;
            }
            expression = expression.replace(/x/g, '*').replace(/÷/g, '/');
            expression = evaluateExpression(expression);
            out_sym.innerText = ` ${expression} ${number} `;
            out_num.innerText = expression;
            continuousNum = false;
        } else {
            if (out_sym.innerText === "") return;
            out_sym.innerText += ` ${out_num.innerText} ${number} `;
            continuousNum = false;
        }
    }
</script>
